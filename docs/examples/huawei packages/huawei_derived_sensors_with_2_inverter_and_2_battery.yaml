#############################
#   
#   WLCRS - Huawei Solar Integrattion - Combine multiple inverter values
#   See: https://github.com/wlcrs/huawei_solar/wiki/Connecting-to-daisy-chained-inverters
#
#   If your HA instance has a /homeasssistant/packages directory configured, this may be deployed by saving this text into a file
#   in that location. i.e.   /homeasssistant/packages/huawei_derived_sensors.yaml
#
#   Huawei Solar Setup: 2 x Inverters, 2 x LUNA ESS Batteries and 1 x Power/Consumption Meter (DDSU/DSTU-666H)
#
#
template:

########### Start: PV Strings - Power ###########

    # Inverter 1 - PV String 1  - Power. Calculated from current x voltage.
    # Referred to as PV1 on the SunSynk card.
  - sensor:
    - name: "Inverter 1 - PV 1 Power"
      unique_id: inverter_pv_1_power
      state_class: "measurement"
      device_class: power
      unit_of_measurement: "W"
      icon: mdi:solar-power
      state: >-
        {{ (states('sensor.inverter_pv_1_current')|float 
          * states('sensor.inverter_pv_1_voltage')|float) }}
      availability: >-
        {{ (states('sensor.inverter_pv_1_current')|is_number)
            and (states('sensor.inverter_pv_1_voltage')|is_number) }}


    # Inverter 1 - PV String 2  - Power. Calculated from current x voltage.
    # Referred to as PV2 on the SunSynk card.
  - sensor:
    - name: "Inverter 1 - PV 2 Power"
      unique_id: inverter_pv_2_power
      state_class: "measurement"
      device_class: power
      unit_of_measurement: "W"
      icon: mdi:solar-power
      state: >-
        {{ (states('sensor.inverter_pv_2_current')|float
          * states('sensor.inverter_pv_2_voltage')|float) }}
      availability: >-
        {{ (states('sensor.inverter_pv_2_current')|is_number)
            and (states('sensor.inverter_pv_2_voltage')|is_number) }}


      # Inverter 2 - PV String 1  - Power. Calculated from current x voltage.
      # Referred to as PV3 on the SunSynk card.
  - sensor:
    - name: "Inverter 2 - PV 1 Power"
      unique_id: inverter_pv_1_power_2
      state_class: "measurement"
      device_class: power
      unit_of_measurement: "W"
      icon: mdi:solar-power
      state: >-
        {{ (states('sensor.inverter_pv_1_current_2')|float
          * states('sensor.inverter_pv_1_voltage_2')|float) }}
      availability: >-
        {{ (states('sensor.inverter_pv_1_current_2')|is_number)
            and (states('sensor.inverter_pv_1_voltage_2')|is_number) }}


      # Inverter 2 - PV String 2  - Power. Calculated from current x voltage.
      # Referred to as PV4 on the SunSynk card.
  - sensor:
    - name: "Inverter 2 - PV 2 Power"
      unique_id: inverter_pv_2_power_2
      state_class: "measurement"
      device_class: power
      unit_of_measurement: "W"
      icon: mdi:solar-power
      state: >-
        {{ (states('sensor.inverter_pv_2_current_2')|float
          * states('sensor.inverter_pv_2_voltage_2')|float) }}
      availability: >-
        {{ (states('sensor.inverter_pv_2_current_2')|is_number)
            and (states('sensor.inverter_pv_2_voltage_2')|is_number) }}

########### Start: Inverters - Combined values for 2 inverters ###########

  # Provides the combined current Active Power of both inverters, in Watts.
  - sensor:
    - name: "Inverters - Active Power"
      unique_id: inverters_active_power
      unit_of_measurement: "W"
      device_class: "power"
      state_class: measurement
      state: >-
        {{ (states('sensor.inverter_active_power')|float
          + states('sensor.inverter_active_power_2')|float) }}
      availability: >-
        {{ (states('sensor.inverter_active_power')|is_number)
            and (states('sensor.inverter_active_power_2')|is_number) }}

  # Provides the combined current production of both inverters, in Watts
  - sensor:
    - name: "Inverters - Input Power"
      unique_id: inverters_input_power
      unit_of_measurement: "W"
      device_class: "power"
      state_class: measurement
      state: >-
        {{ (states('sensor.inverter_input_power')|float
          + states('sensor.inverter_input_power_2')|float) }}
      availability: >-
        {{ (states('sensor.inverter_input_power')|is_number)
            and (states('sensor.inverter_input_power_2')|is_number) }}


  # Provides the combined lifetime yield of both inverters, in kWh.
  - sensor:
    - name: "Inverters - Total Yield"
      unique_id: inverters_total_yield
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: total_increasing
      state: >-
        {{ (states('sensor.inverter_total_yield')|float
          + states('sensor.inverter_total_yield_2')|float) }}
      availability: >-
        {{ (states('sensor.inverter_total_yield')|is_number)
            and (states('sensor.inverter_total_yield_2')|is_number) }}


  # Provides the combined daily yield of both inverters, in kWh.
  - sensor:
    - name: "Inverters - Daily Yield"
      unique_id: inverters_daily_yield
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: total_increasing
      state: >-
        {{ (states('sensor.inverter_daily_yield')|float
          + states('sensor.inverter_daily_yield_2')|float) }}
      availability: >-
        {{ (states('sensor.inverter_daily_yield')|is_number)
            and (states('sensor.inverter_daily_yield_2')|is_number) }}

########### Start: Batteries - Combined values for 2 batteries ###########
#
#  Note: If you do NOT have two batteries, these sensors may cause your configuration to not load, due to yaml error
#        casued by the  sensor.battery_<entity_name>_2 not being detected.
#

  # Provides the combined daily yield of both batteries, as a %.
  - sensor:
    - name: "Batteries - State of Capacity"
      unique_id: batteries_state_of_capacity
      unit_of_measurement: "%"
      device_class: "battery"
      state_class: measurement
      state: >-
        {{ (states('sensor.battery_state_of_capacity')|float
          + states('sensor.battery_state_of_capacity_2')|float)|round(2) }}
      availability: >-
        {{ (states('sensor.battery_state_of_capacity')|is_number)
            and (states('sensor.battery_state_of_capacity_2')|is_number) }}

  # Provides the combined charge/discharge power of both batteries, in watts.
  - sensor:
    - name: "Batteries - Charge/Discharge Power"
      unique_id: batteries_charge_discharge_power
      unit_of_measurement: "W"
      device_class: "power"
      state_class: measurement
      state: >-
        {{ (states('sensor.battery_charge_discharge_power')|float
          + states('sensor.battery_charge_discharge_power_2')|float) }}
       availability: >-
         {{ (states('sensor.battery_charge_discharge_power')|is_number)
             and (states('sensor.battery_charge_discharge_power_2')|is_number) }}

  # Provides the combined daily charge of both batteries, in kWh.
  - sensor:
    - name: "Batteries - Day Charge"
      unique_id: batteries_day_charge
      unit_of_measurement: "kWh"
      device_class: "energy"
      state: >-
        {{ (states('sensor.battery_day_charge')|float 
          + states('sensor.battery_day_charge_2')|float) / 2 }}
       availability: >-
         {{ (states('sensor.battery_day_charge')|is_number)
             and (states('sensor.battery_day_charge_2')|is_number) }}

  # Provides the combined daily discharge of both batteries, in kWh.
  - sensor:
    - name: "Batteries - Day Discharge"
      unique_id: batteries_day_discharge
      unit_of_measurement: "kWh"
      device_class: "energy"
      state: >-
        {{ (states('sensor.battery_day_discharge')|float
          + states('sensor.battery_day_discharge_2')|float) /2  }}
       availability: >-
         {{ (states('sensor.battery_day_discharge')|is_number)
             and (states('sensor.battery_day_discharge_2')|is_number) }}


  # Provides the combined buss current both batteries, in Amps.
  - sensor:
    - name: "Batteries - Bus Current"
      unique_id: sensor.batteries_bus_current
      unit_of_measurement: "A"
      device_class: "current"      
      state: >-
        {{ (states('sensor.battery_bus_current')|float 
          + states('sensor.battery_bus_current_2')|float) / 2 }}
       availability: >-
         {{ (states('sensor.battery_bus_current')|is_number)
             and (states('sensor.battery_bus_current_2')|is_number) }}


  # Provides the combined daily charge of both batteries, in kWh.
  - sensor:
    - name: "Batteries - Temperature"
      unique_id: sensor.batteries_temperature 
      unit_of_measurement: "°C"
      device_class: "temperature"      
      state: >-
        {{ (states('sensor.battery_battery_1_temperature')|float 
          + states('sensor.battery_battery_2_temperature')|float) / 2 }}
       availability: >-
         {{ (states('sensor.battery_battery_1_temperature')|is_number)
             and (states('sensor.battery_battery_2_temperature')|is_number) }}

  # Provides the combined average temperature of both batteriesm in °C.
  # Note: If either battery state is 'uknown' then displays the state of the other battery.
  - sensor:
    - name: "Batteries - Temperature (Average)"
      unique_id: sensor.batteries_temperature 
      unit_of_measurement: "°C"
      state: >-
        {% set temp_1 = states('sensor.battery_battery_1_temperature') | float(default=0) %}
        {% set temp_2 = states('sensor.battery_battery_2_temperature') | float(default=0) %}

        {% if states('sensor.battery_battery_2_temperature') == 'unknown' %}
          {{ temp_1 | round(1) }}
        {% else %}
          {% set count = 0 %}
          {% set sum = 0 %}

          {% if states('sensor.battery_battery_1_temperature') != 'unknown' %}
            {% set sum = sum + temp_1 %}
            {% set count = count + 1 %}
          {% endif %}

          {% if states('sensor.battery_battery_2_temperature') != 'unknown' %}
            {% set sum = sum + temp_2 %}
            {% set count = count + 1 %}
          {% endif %}

          {% if count > 0 %}
            {{ sum / count | round(1) }}
          {% else %}
            N/A
          {% endif %}
        {% endif %}
        availability: >-
          {{ states('sensor.battery_battery_1_temperature') != 'unavailable'
          or states('sensor.battery_battery_2_temperature') != 'unavailable' }}

     
  # Provides the combined status both batteries. If either battery is offline of faulty
  # then the sensor will show this as the overall status, otherwise it will the status of the online battery.
  - sensor:
    - name: "Batteries - Status"
      unique_id: sensor.batteries_status
      state: >-
          {% set battery_1_state = states('sensor.battery_status') %}
          {% set battery_2_state = states('sensor.battery_status_2') %}
          {% if 'offline' in [battery_1_state, battery_2_state] %}
            offline
          {% elif 'fault' in [battery_1_state, battery_2_state] %}
            fault
          {% else %}
            {{ battery_1_state if battery_1_state != 'standby' else sensor_2_state }}
          {% endif %}
      availability: >-
        {{ (states('sensor.battery_status') not in [ 'unavailable', 'none', 'unknown' ] )
        or (states('sensor.battery_status_2') not in [ 'unavailable', 'none', 'unknown' ]) }}
    

  # Provides the combined bus current both batteries, in Amps.
  - sensor:
    - name: "Batteries - Bus Current"
      unique_id: sensor.batteries_bus_current
      unit_of_measurement: "A"
      device_class: "current"      
      state: >-
        {% set battery_bus_current_1 = states('sensor.battery_bus_current') | float(default=0) %}
        {% set battery_bus_current_2 = states('sensor.battery_bus_current_2') | float(default=0) %}

        {% if states('sensor.battery_bus_current_2') == 'unknown' %}
          {{ battery_bus_current_1 | round(1) }}
        {% else %}
          {% set count = 0 %}
          {% set sum = 0 %}

          {% if states('sensor.battery_bus_current') != 'unknown' %}
            {% set sum = sum + battery_bus_current__1 %}
            {% set count = count + 1 %}
          {% endif %}

          {% if states('sensor.battery_bus_current__2') != 'unknown' %}
            {% set sum = sum + battery_bus_current_2 %}
            {% set count = count + 1 %}
          {% endif %}

          {% if count > 0 %}
            {{ (sum / count) | round(1) }}
          {% else %}
            N/A
          {% endif %}
        {% endif %}
        availability: >-
          {{ states('sensor.battery_bus_current') != 'unavailable'
          or states('sensor.battery_bus_current_2') != 'unavailable' }}


#############################

  # Provides 'Daily Solar Yield' being the yield of your solar panels, minus any efficiency losses by the inverter
  # See: https://github.com/wlcrs/huawei_solar/wiki/Daily-Solar-Yield

#  This version works if you have an inverter and a LUNA ESS battery attached.
  - sensor:
    - name: "Inverter - Input Power with Efficiency Loss"
      unique_id: inverter_input_power_with_efficiency_loss
      unit_of_measurement: "W"
      device_class: power
      state_class: measurement
      state: >-
        {% set inverter_rating = 10000 %} {# adjust this value to the rated power of your inverter(s) #}
        {% set inpower = states('sensor.inverter_input_power')|float(0) %}
        {% if inpower < (inverter_rating*0.1) %}
          {{ inpower * 0.90 }}
        {% elif inpower < (inverter_rating*0.2) %}  
          {{ inpower * 0.95 }}
        {% else %}
          {{ inpower * 0.98 }}
        {% endif %}
      availability: >-
        {{ (states('sensor.inverter_input_power')|is_number) }}


########### Start: Power Meter - Calculates the Active Power being consumed in the house from grid, inveters & battery ###########

  # Provides the calculated current load, in Watts
  - sensor:
    - name: "House Consumption - Power"
      unique_id: house_consumption_power
      unit_of_measurement: "W"
      icon: mdi:solar-power
      device_class: "power"
      state_class: measurement
      state: >-
        {{ (states('sensor.inverter_active_power')|float
          - states('sensor.batteries_charge_discharge_power')|float
          - states('sensor.power_meter_active_power')|float) }}
      availability: >-
        {{ (states('sensor.inverters_active_power')|is_number)
            and (states('sensor.batteries_charge_discharge_power')|is_number)
              and (states('sensor.power_meter_active_power')|is_number) }}



########### Start: Helpers - Riemann Sum to conver Power (W) to Energy (kWh) ###########

  # Riemann Sum sensor to take "Inverters - Input Power with efficiency loss" and convert it into an ENERGY sensor.
sensor:
  - platform: integration
    name: "Inverter - Input Power - Energy"
    unique_id: inverter_input_power_energy
    source: sensor.inverter_input_power_with_efficiency_loss
    round: 3
    unit_prefix: k
    unit_time: h
    method: left


  # Riemann Sum sensor to take "House Consumption - Power" and convert it into ENERGY sensor.
  - platform: integration
    name: "House Consumption - Energy"
    unique_id: house_consumption_energy
    source: sensor.house_consumption_power
    round: 3
    unit_prefix: k
    unit_time: h
    method: left


########### Start: Energy Meter - Used to create sensors that track usage over a set period ###########

energy_meter:

  # Used to convert the above Riemann sum sensor into an ENERGY sensor that RESETS to ZERO DAILY. 
  house_consumption_energy_daily:
    unique_id: house_consumption_energy_daily
    name: "House Consumption - Energy - Daily"
    source: sensor.house_consumption_energy
    cycle: daily


######################### End of File #########################    
